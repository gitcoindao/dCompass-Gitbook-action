{"version":3,"file":"lib.mjs","sources":["../src/__generated__/model.ts","../src/utils.ts","../src/core.ts","../src/public.ts"],"sourcesContent":["// This is a file generated by the publish-model.mjs script, do not edit manually\n\nimport type { CryptoAccountLinks } from '@datamodels/identity-accounts-crypto'\nimport type { AlsoKnownAs } from '@datamodels/identity-accounts-web'\nimport type { BasicProfile } from '@datamodels/identity-profile-basic'\nimport type { ModelTypeAliases, PublishedModel } from '@glazed/types'\n\nexport type ModelTypes = ModelTypeAliases<\n  {\n    AlsoKnownAs: AlsoKnownAs\n    BasicProfile: BasicProfile\n    CryptoAccounts: CryptoAccountLinks\n  },\n  {\n    alsoKnownAs: 'AlsoKnownAs'\n    basicProfile: 'BasicProfile'\n    cryptoAccounts: 'CryptoAccounts'\n  }\n>\n\nexport const model: PublishedModel<ModelTypes> = {\n  definitions: {\n    cryptoAccounts: 'kjzl6cwe1jw149z4rvwzi56mjjukafta30kojzktd9dsrgqdgz4wlnceu59f95f',\n    alsoKnownAs: 'kjzl6cwe1jw146zfmqa10a5x1vry6au3t362p44uttz4l0k4hi88o41zplhmxnf',\n    basicProfile: 'kjzl6cwe1jw145cjbeko9kil8g9bxszjhyde21ob8epxuxkaon1izyqsu8wgcic',\n  },\n  schemas: {\n    CryptoAccounts: 'ceramic://k3y52l7qbv1frypussjburqg4fykyyycfu0p9znc75lv2t5cg4xaslhagkd7h7mkg',\n    AlsoKnownAs: 'ceramic://k3y52l7qbv1fryojt8n8cw2k04p9wp67ly59iwqs65dejso566fij5wsdrb871yio',\n    BasicProfile: 'ceramic://k3y52l7qbv1frxt706gqfzmq6cbqdkptzk8uudaryhlkf6ly9vx21hqu4r6k1jqio',\n  },\n  tiles: {},\n}\n","import { AccountID } from 'caip'\n\nexport { isDIDstring } from '@glazed/did-datastore'\n\nexport function isCAIP10string(account: string): boolean {\n  try {\n    AccountID.parse(account)\n    return true\n  } catch (e) {\n    return false\n  }\n}","import { getResolver as get3IDResolver } from '@ceramicnetwork/3id-did-resolver'\nimport { CeramicClient } from '@ceramicnetwork/http-client'\nimport { Caip10Link } from '@ceramicnetwork/stream-caip10-link'\nimport { DataModel } from '@glazed/datamodel'\nimport { DIDDataStore } from '@glazed/did-datastore'\nimport type { DefinitionContentType } from '@glazed/did-datastore'\nimport { TileLoader } from '@glazed/tile-loader'\nimport type { TileCache } from '@glazed/tile-loader'\nimport type { ModelTypeAliases, ModelTypesToAliases } from '@glazed/types'\nimport { Resolver } from 'did-resolver'\nimport { getResolver as getKeyResolver } from 'key-did-resolver'\n\nimport { model as coreModel } from './__generated__/model'\nimport type { CeramicNetwork, CoreModelTypes } from './types'\nimport { isCAIP10string } from './utils'\n\nexport const CERAMIC_URLS: Record<CeramicNetwork, string> = {\n  local: 'http://localhost:7007',\n  'mainnet-gateway': 'https://gateway.ceramic.network',\n  'testnet-clay': 'https://ceramic-clay.3boxlabs.com',\n  'testnet-clay-gateway': 'https://gateway-clay.ceramic.network',\n}\n\nexport type CoreParams<ModelTypes extends ModelTypeAliases = CoreModelTypes> = {\n  cache?: TileCache | boolean\n  ceramic: CeramicNetwork | string\n  loader?: TileLoader\n  model?: ModelTypesToAliases<ModelTypes>\n}\n\n/**\n * ```sh\n * import { Core } from '@self.id/core'\n * ```\n */\nexport class Core<\n  ModelTypes extends ModelTypeAliases = CoreModelTypes,\n  Alias extends keyof ModelTypes['definitions'] = keyof ModelTypes['definitions']\n> {\n  #ceramic: CeramicClient\n  #dataModel: DataModel<ModelTypes>\n  #dataStore: DIDDataStore<ModelTypes>\n  #resolver: Resolver\n  #tileLoader: TileLoader\n\n  constructor(params: CoreParams<ModelTypes>) {\n    const ceramic = new CeramicClient(\n      CERAMIC_URLS[params.ceramic as CeramicNetwork] ?? params.ceramic\n    )\n    const loader = params.loader ?? new TileLoader({ ceramic, cache: params.cache })\n\n    this.#ceramic = ceramic\n    this.#dataModel = new DataModel<ModelTypes>({\n      autopin: true,\n      loader,\n      model: params.model ?? (coreModel as ModelTypesToAliases<ModelTypes>),\n    })\n    this.#dataStore = new DIDDataStore<ModelTypes>({\n      autopin: true,\n      ceramic,\n      loader,\n      model: this.#dataModel,\n    })\n    this.#resolver = new Resolver({ ...getKeyResolver(), ...get3IDResolver(this.#ceramic) })\n    this.#tileLoader = loader\n  }\n\n  get ceramic(): CeramicClient {\n    return this.#ceramic\n  }\n\n  get dataModel(): DataModel<ModelTypes> {\n    return this.#dataModel\n  }\n\n  get dataStore(): DIDDataStore<ModelTypes> {\n    return this.#dataStore\n  }\n\n  get resolver(): Resolver {\n    return this.#resolver\n  }\n\n  get tileLoader(): TileLoader {\n    return this.#tileLoader\n  }\n\n  async getAccountDID(account: string): Promise<string> {\n    const link = await Caip10Link.fromAccount(this.#ceramic, account)\n    if (link.did == null) {\n      throw new Error(`No DID found for ${account}`)\n    }\n    return link.did\n  }\n\n  async toDID(accountOrDID: string): Promise<string> {\n    return isCAIP10string(accountOrDID) ? await this.getAccountDID(accountOrDID) : accountOrDID\n  }\n\n  async get<Key extends Alias, ContentType = DefinitionContentType<ModelTypes, Key>>(\n    key: Key,\n    id: string\n  ): Promise<ContentType | null> {\n    const did = await this.toDID(id)\n    return await this.#dataStore.get(key, did)\n  }\n}\n","import type { DefinitionContentType } from '@glazed/did-datastore'\nimport type { ModelTypeAliases } from '@glazed/types'\n\nimport type { ModelTypes as CoreModelTypes } from './__generated__/model'\nimport type { Core } from './core'\n\nexport type PublicIDParams<ModelTypes extends ModelTypeAliases = CoreModelTypes> = {\n  core: Core<ModelTypes>\n  id: string\n}\n\n/**\n * ```sh\n * import { PublicID } from '@self.id/core'\n * ```\n */\nexport class PublicID<\n  ModelTypes extends ModelTypeAliases = CoreModelTypes,\n  Alias extends keyof ModelTypes['definitions'] = keyof ModelTypes['definitions']\n> {\n  #core: Core<ModelTypes, Alias>\n  #id: string\n\n  constructor(params: PublicIDParams<ModelTypes>) {\n    this.#core = params.core\n    this.#id = params.id\n  }\n\n  get id(): string {\n    return this.#id\n  }\n\n  async get<Key extends Alias, ContentType = DefinitionContentType<ModelTypes, Key>>(\n    key: Key\n  ): Promise<ContentType | null> {\n    return await this.#core.dataStore.get(key, this.#id)\n  }\n}\n"],"names":["coreModel","__privateGet","getKeyResolver","get3IDResolver"],"mappings":"ggBAoBa,GAAoC,CAC/C,YAAa,CACX,eAAgB,kEAChB,YAAa,kEACb,aAAc,mEAEhB,QAAS,CACP,eAAgB,8EAChB,YAAa,8EACb,aAAc,+EAEhB,MAAO,eC3BsB,EAA0B,IACnD,UACQ,MAAM,GACT,eAEA,kWCOE,GAA+C,CAC1D,MAAO,wBACP,kBAAmB,kCACnB,eAAgB,oCAChB,uBAAwB,+CAkBxB,CAOA,YAAY,EAAgC,2FACpC,GAAU,GAAI,GAClB,EAAa,EAAO,UAA8B,EAAO,SAErD,EAAS,EAAO,QAAU,GAAI,GAAW,CAAE,UAAS,MAAO,EAAO,eAEnE,EAAW,UACX,EAAa,GAAI,GAAsB,CAC1C,QAAS,GACT,SACA,MAAO,EAAO,OAAUA,YAErB,EAAa,GAAI,GAAyB,CAC7C,QAAS,GACT,UACA,SACA,MAAOC,OAAK,aAET,EAAY,GAAI,GAAS,IAAKC,OAAqBC,EAAeF,OAAK,cACvE,EAAc,MAGjB,UAAyB,OACpBA,QAAK,MAGV,YAAmC,OAC9BA,QAAK,MAGV,YAAsC,OACjCA,QAAK,MAGV,WAAqB,OAChBA,QAAK,MAGV,aAAyB,OACpBA,QAAK,QAGR,eAAc,EAAkC,MAC9C,GAAO,KAAM,GAAW,YAAYA,OAAK,GAAU,MACrD,EAAK,KAAO,UACR,IAAI,OAAM,oBAAoB,WAE/B,GAAK,SAGR,OAAM,EAAuC,OAC1C,GAAe,GAAgB,KAAM,MAAK,cAAc,GAAgB,OAG3E,KACJ,EACA,EAC6B,MACvB,GAAM,KAAM,MAAK,MAAM,SACtB,MAAMA,QAAK,GAAW,IAAI,EAAK,IAjExC,cACA,cACA,cACA,cACA,wWCxBA,CAIA,YAAY,EAAoC,0CACzC,EAAQ,EAAO,aACf,EAAM,EAAO,OAGhB,KAAa,OACR,QAAK,QAGR,KACJ,EAC6B,OACtB,MAAM,QAAK,GAAM,UAAU,IAAI,EAAK,OAAK,KAflD,cACA"}